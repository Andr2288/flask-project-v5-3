from main import app
from models import db, User, Post, Comment
from sqlalchemy import create_engine, text
from urllib.parse import urlparse
import time


def check_database_exists(uri):
    parsed = urlparse(uri)
    db_name = parsed.path.lstrip('/')

    base_uri = f"{parsed.scheme}://"
    if parsed.username:
        base_uri += parsed.username
        if parsed.password:
            base_uri += f":{parsed.password}"
        base_uri += "@"
    if parsed.hostname:
        base_uri += parsed.hostname
    if parsed.port:
        base_uri += f":{parsed.port}"
    base_uri += "/"

    try:
        engine = create_engine(base_uri)
        with engine.connect() as conn:
            result = conn.execute(text("SHOW DATABASES"))
            databases = [row[0] for row in result]
            return db_name in databases, db_name, base_uri
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL: {e}")
        return False, db_name, base_uri


def delete_database():
    """–í–∏–¥–∞–ª—è—î –±–∞–∑—É –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î"""
    uri = app.config.get('SQLALCHEMY_DATABASE_URI')
    if not uri or not uri.startswith('mysql'):
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        return False

    db_exists, db_name, base_uri = check_database_exists(uri)
    if not db_exists:
        print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö `{db_name}` –Ω–µ —ñ—Å–Ω—É—î ‚Äî –Ω—ñ—á–æ–≥–æ –≤–∏–¥–∞–ª—è—Ç–∏")
        return True

    print(f"üóëÔ∏è  –í–∏–¥–∞–ª—è—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö `{db_name}`...")

    try:
        engine = create_engine(base_uri, isolation_level="AUTOCOMMIT", echo=True)
        with engine.connect() as conn:
            # –ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
            active_connections = conn.execute(text(f"""
                SELECT id FROM information_schema.processlist WHERE db = :dbname
            """), {'dbname': db_name}).fetchall()

            for row in active_connections:
                conn.execute(text(f"KILL {row[0]}"))

            conn.execute(text(f"DROP DATABASE `{db_name}`"))
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö `{db_name}` –≤–∏–¥–∞–ª–µ–Ω–∞")
        engine.dispose()
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        return False


def create_and_fill_database():
    """–°—Ç–≤–æ—Ä—é—î –±–∞–∑—É, —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –Ω–∞–ø–æ–≤–Ω—é—î —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
    uri = app.config.get('SQLALCHEMY_DATABASE_URI')
    if not uri or not uri.startswith('mysql'):
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        return False

    db_exists, db_name, base_uri = check_database_exists(uri)
    if db_exists:
        print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö `{db_name}` –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑ –Ω—É–ª—è")
        return False

    print(f"üìù –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö `{db_name}`...")
    try:
        engine = create_engine(base_uri, isolation_level="AUTOCOMMIT")
        with engine.connect() as conn:
            conn.execute(text(f"CREATE DATABASE `{db_name}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"))
        engine.dispose()
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö `{db_name}` —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        return False

    time.sleep(1)  # –¥–∞—î–º–æ —á–∞—Å —Å–µ—Ä–≤–µ—Ä—É

    with app.app_context():
        print("üìù –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ...")
        try:
            db.create_all()
            db.session.remove()
            db.engine.dispose()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—å: {e}")
            return False

        print("üìù –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ...")
        try:
            user1 = User(username='admin', email='admin@example.com')
            user1.set_password('123456')

            user2 = User(username='admin2', email='admin2@example.com')
            user2.set_password('123456')

            user3 = User(username='user1', email='user1@example.com')
            user3.set_password('123456')

            user4 = User(username='blogger', email='blogger@example.com')
            user4.set_password('123456')

            db.session.add_all([user1, user2, user3, user4])
            db.session.commit()

            posts_data = [
                {
                    'title': '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –±–ª–æ–≥—É!',
                    'content': '–¶–µ –ø–µ—Ä—à–∏–π –ø–æ—Å—Ç —É –Ω–∞—à–æ–º—É –±–ª–æ–∑—ñ. –¢—É—Ç –º–∏ –±—É–¥–µ–º–æ –¥—ñ–ª–∏—Ç–∏—Å—è —Ü—ñ–∫–∞–≤–∏–º–∏ –¥—É–º–∫–∞–º–∏ —Ç–∞ —ñ–¥–µ—è–º–∏. –¢–∞–∫–æ–∂ —Ç–µ–ø–µ—Ä —É –Ω–∞—Å —î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∏!',
                    'user_id': user1.id
                },
                {
                    'title': '–ü—Ä–æ Flask —Ç–∞ –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫—É',
                    'content': 'Flask - —Ü–µ –º—ñ–∫—Ä–æ—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Python, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î —à–≤–∏–¥–∫–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∏. –í—ñ–Ω –ø—Ä–æ—Å—Ç–∏–π —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ —Ç–∞ –¥—É–∂–µ –≥–Ω—É—á–∫–∏–π. –ó Flask-Migrate –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –∫–µ—Ä—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∞–º–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.',
                    'user_id': user4.id
                },
                {
                    'title': '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∏ –∑ Folium',
                    'content': 'Folium –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫—Ä–∞—Å–∏–≤—ñ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ Python. –¶–µ –¥—É–∂–µ –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö.',
                    'user_id': user3.id
                },
                {
                    'title': '–ú—ñ–≥—Ä–∞—Ü—ñ—ó Flask-Migrate',
                    'content': 'Flask-Migrate —Å–ø—Ä–æ—â—É—î —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–º—ñ–Ω–∞–º–∏ —Å—Ö–µ–º–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ –¥–∞–Ω–∏—Ö.',
                    'user_id': user2.id
                }
            ]

            for post_data in posts_data:
                post = Post(**post_data)
                db.session.add(post)

            db.session.commit()

            posts = Post.query.all()

            comments_data = [
                {
                    'content': '–î—É–∂–µ —Ü—ñ–∫–∞–≤–∏–π –ø–æ—Å—Ç! –î—è–∫—É—é –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.',
                    'post_id': posts[0].id,
                    'user_id': user3.id
                },
                {
                    'content': '–ó–≥–æ–¥–µ–Ω! Flask —Å–ø—Ä–∞–≤–¥—ñ –ø—Ä–æ—Å—Ç–∏–π —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ. Migrate —Ç–µ–∂ –¥—É–∂–µ –∫–æ—Ä–∏—Å–Ω–∏–π.',
                    'post_id': posts[1].id,
                    'user_id': user1.id
                },
                {
                    'content': 'Folium –≤–∏–≥–ª—è–¥–∞—î –¥—É–∂–µ —Ü—ñ–∫–∞–≤–æ! –°–ø—Ä–æ–±—É—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤ —Å–≤–æ—î–º—É –ø—Ä–æ–µ–∫—Ç—ñ.',
                    'post_id': posts[2].id,
                    'user_id': user4.id
                },
                {
                    'content': '–í—ñ–¥–º—ñ–Ω–Ω–∏–π –ø–æ—Å—Ç –ø—Ä–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó! –î—É–∂–µ –∫–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è.',
                    'post_id': posts[3].id,
                    'user_id': user1.id
                }
            ]

            for comment_data in comments_data:
                comment = Comment(**comment_data)
                db.session.add(comment)

            db.session.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
            return False


if __name__ == '__main__':
    print("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
    print("1 - –í–∏–¥–∞–ª–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
    print("2 - –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑—É —Ç–∞ –Ω–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏")
    choice = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó (1/2): ").strip()

    if choice == '1':
        success = delete_database()
        if success:
            print("‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        else:
            print("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é.")
    elif choice == '2':
        success = create_and_fill_database()
        if success:
            print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–∑–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        else:
            print("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –∞–±–æ –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é.")
    else:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å 1 –∞–±–æ 2.")
